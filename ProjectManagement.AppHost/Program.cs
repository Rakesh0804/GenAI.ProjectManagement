using System.Diagnostics;

var builder = DistributedApplication.CreateBuilder(args);

// Add PostgreSQL database
var postgres = builder.AddPostgres("postgres")
    .WithDataVolume();

var projectDb = postgres.AddDatabase("ProjectManagementDB");

// Add the API project
var apiService = builder.AddProject<Projects.GenAI_ProjectManagement_WebAPI>("api")
    .WithReference(projectDb);

// Clean up any existing Angular processes and generate configuration
CleanupAngularProcesses();
GenerateAngularConfig();

// Add the Angular frontend with API service reference and dynamic port
var frontend = builder.AddNpmApp("frontend", "../project-management-ui")
    .WithReference(apiService)
    .WithHttpEndpoint(env: "PORT")
    .WithExternalHttpEndpoints();

var app = builder.Build();

app.Run();

static void GenerateAngularConfig()
{
    try
    {
        var configPath = Path.Combine("..", "project-management-ui", "src", "assets", "config.js");
        var configDir = Path.GetDirectoryName(configPath);
        
        if (configDir != null && !Directory.Exists(configDir))
        {
            Directory.CreateDirectory(configDir);
        }
        
        // Use the fixed API URL from launchSettings.json
        var apiUrl = "http://localhost:5052/api";
        
        var configContent = $@"// This file is dynamically generated by Aspire
        window.APP_CONFIG = {{
            API_URL: '{apiUrl}'
        }};";
        
        File.WriteAllText(configPath, configContent);
        Console.WriteLine($"Generated Angular config with API URL: {apiUrl}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Failed to generate Angular config: {ex.Message}");
    }
}

static void CleanupAngularProcesses()
{
    try
    {
        Console.WriteLine("Cleaning up any existing Angular processes...");
        
        // Kill processes using ports 4200, 4201, 4202
        var ports = new[] { 4200, 4201, 4202 };
        foreach (var port in ports)
        {
            try
            {
                var processInfo = new ProcessStartInfo
                {
                    FileName = "netstat",
                    Arguments = "-ano",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using var process = Process.Start(processInfo);
                if (process != null)
                {
                    var output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();

                    var lines = output.Split('\n');
                    foreach (var line in lines)
                    {
                        if (line.Contains($":{port}") && line.Contains("LISTENING"))
                        {
                            var parts = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                            if (parts.Length > 0 && int.TryParse(parts[^1], out var pid))
                            {
                                try
                                {
                                    var killProcess = Process.GetProcessById(pid);
                                    killProcess.Kill();
                                    Console.WriteLine($"Killed process {pid} using port {port}");
                                }
                                catch
                                {
                                    // Process might already be gone
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Continue if we can't clean up a specific port
            }
        }
        
        Console.WriteLine("Cleanup completed.");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Failed to cleanup Angular processes: {ex.Message}");
    }
}
